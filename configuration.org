* Display Settings

  I’ve been using Emacs for many years, and appreciate a certain
  minimalist approach to its display. While you can turn these off
  with the menu items now, it is just as easy to set them here.

  #+BEGIN_SRC emacs-lisp
        (setq inhibit-startup-message t)
        (setq initial-scratch-message "")
        (setq visible-bell t)

        (when (window-system)
          (tool-bar-mode -1)
          (when (fboundp 'horizontal-scroll-bar-mode)
            (horizontal-scroll-bar-mode -1))
          (scroll-bar-mode -1))

        (when (window-system)
          (progn
            (set-face-attribute 'default
                                nil
                                :font "Fira Code"
                                :width 'normal
                                :height 120
                                :weight 'normal)
            (setq-default line-spacing 3)       ; in pixels

            ;; Enable the Fira Code ligatures.
            (mac-auto-operator-composition-mode 1)))

        (when (eq system-type 'darwin)
          (setq mac-option-modifier 'meta))

        (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

* General Settings

** Customization Section

   While I would rather program my configurations, sometimes the Emacs
   menu system is “good enough”, but I want it in its own file:

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC

** Modernizing Emacs

   With a long history of working on small machines without gigabytes
   of RAM, we might as well let Emacs be the beast it has always
   dreamed of being.

   First, let’s increase the cache before starting garbage collection:

   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 50000000)
   #+END_SRC

   Found [[https://github.com/wasamasa/dotemacs/blob/master/init.org#init][here]] how to remove the warnings from the GnuTLS library when
   using HTTPS… increase the minimum prime bits size:

   #+BEGIN_SRC emacs-lisp
     (setq gnutls-min-prime-bits 4096)
   #+END_SRC

** Backups

  Store backups in dedicated directory ~backups~:

  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist
          (list (cons "." (expand-file-name "backups" user-emacs-directory))))

    (setq auto-save-list-file-prefix
          (expand-file-name "backups/auto-save-list/.saves-" user-emacs-directory))
  #+END_SRC

** Misc

  Tell Emacs who I am:

  #+BEGIN_SRC emacs-lisp
    (setq-default user-full-name    "David Porter"
                  user-mail-address "david.a.porter@gmail.com")
  #+END_SRC

  Suppress ~ad-handle-definition~ warnings (mostly from 3rd-party packages):

  #+BEGIN_SRC emacs-lisp
    (setq ad-redefinition-action 'accept)
  #+END_SRC

  Prevent extraneous tabs:

  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
  #+END_SRC

  On OS X use the GNU Coreutils version of ~ls~ installed by Homebrew,
  which is called ~gls~:

  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'darwin)
      (setq insert-directory-program "gls"))
  #+END_SRC

  ~ibuffer~ is a bit nicer than ~list-buffers~:

  #+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer)
  #+END_SRC

* ~use-package~
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (setq use-package-always-ensure t)
  #+END_SRC

* Theme
** Zenburn
   #+BEGIN_SRC emacs-lisp
      (use-package zenburn-theme
        :config (load-theme 'zenburn t))
   #+END_SRC

* Packages
** Exec Path from Shell
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :config (progn
                 (setq exec-path-from-shell-check-startup-files nil)
                 (exec-path-from-shell-initialize)))
   #+END_SRC

** Server
  Run as a server for use with ~emacsclient~.
  #+BEGIN_SRC emacs-lisp
    (use-package server
      :config (unless (server-running-p) (server-start)))
  #+END_SRC

** Which Key
   #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :config (which-key-mode 1))
   #+END_SRC

** Swiper, Counsel, Avy
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :bind (("C-s"     . swiper)
              ("C-c C-r" . ivy-resume))
       :config (progn
                 (setq ivy-use-virtual-buffers t)
                 (setq ivy-count-format "(%d/%d) ")
                 (setq ivy-display-style 'fancy)
                 (ivy-mode 1)))

     (use-package counsel
       :bind (("M-x"     . counsel-M-x)
              ("C-x C-f" . counsel-find-file)
              ("<f1> f"  . counsel-describe-function)
              ("<f1> v"  . counsel-describe-variable)
              ("<f1> l"  . counsel-find-library)
              ("<f2> i"  . counsel-info-lookup-symbol)
              ("<f2> u"  . counsel-unicode-char)
              ("C-c g"   . counsel-git)
              ("C-c j"   . counsel-git-grep)
              ("C-c k"   . counsel-ag)
              ("C-x l"   . counsel-locate)
              ("M-y"     . counsel-yank-pop)))

     (use-package avy
       :bind (("M-g c" . avy-goto-char)
              ("M-g g" . avy-goto-line)
              ("M-g w" . avy-goto-word-1))
       :config (avy-setup-default))
   #+END_SRC

** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :hook (after-init . global-company-mode))
   #+END_SRC

** Undo Tree

   This replaces the standard Emacs undo system with the
   `undo-tree-mode' system in all buffers.

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :config (global-undo-tree-mode 1))
   #+END_SRC

** Ace Window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :bind (("C-x o" . ace-window)))
   #+END_SRC

** Org

   We have to tell Org mode that it's okay to execute =sh= code:

   #+BEGIN_SRC emacs-lisp
     (use-package org
       :config (progn
                 (org-babel-do-load-languages
                  'org-babel-load-languages '((sh . t)))
                 ;; syntax-highlight source code blocks:
                 (setq org-src-fontify-natively t))) 
   #+END_SRC

   (We can add other languages to this list as the need arises.)

   Then we use a couple of Org helper packages. =org-bullets= replaces
   the asterisks in headings with nice glyphs:

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :after (org)
       :hook (org-mode . org-bullets-mode))
   #+END_SRC

   =org-journal= makes it easy to keep an Org mode-based journal:

   #+BEGIN_SRC emacs-lisp
     (use-package org-journal
       :after (org)
       :bind (("C-c C-j" . org-journal-new-entry)))
   #+END_SRC

** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind (("C-x g" . magit-status))
       :config (setq magit-completing-read-function 'ivy-completing-read))
   #+END_SRC

** Smartparens

   Here are the keybindings I'm using:

   |-------------------------+-----------------|
   | sp-beginning-of-sexp    | "C-M-a"         |
   | sp-end-of-sexp          | "C-M-e"         |
   | sp-forward-sexp         | "C-M-f"         |
   | sp-backward-sexp        | "C-M-b"         |
   | sp-next-sexp            | "C-M-n"         |
   | sp-previous-sexp        | "C-M-p"         |
   | sp-forward-symbol       | "C-S-f"         |
   | sp-backward-symbol      | "C-S-b"         |
   |-------------------------+-----------------|
   | sp-down-sexp            | "C-M-d"         |
   | sp-up-sexp              | "C-S-u"         |
   | sp-backward-down-sexp   | "C-S-d"         |
   | sp-backward-up-sexp     | "C-M-u"         |
   |-------------------------+-----------------|
   | sp-unwrap-sexp          | "M-]"           |
   | sp-backward-unwrap-sexp | "M-["           |
   | sp-forward-slurp-sexp   | "C-<right>"     |
   | sp-forward-barf-sexp    | "C-<left>"      |
   | sp-backward-slurp-sexp  | "C-M-<left>"    |
   | sp-backward-barf-sexp   | "C-M-<right>"   |
   |-------------------------+-----------------|
   | sp-transpose-sexp       | "C-M-t"         |
   | sp-mark-sexp            | "C-M-SPC"       |
   | sp-copy-sexp            | "C-M-w"         |
   | sp-kill-sexp            | "C-M-k"         |
   | sp-backward-kill-sexp   | "M-<backspace>" |
   | sp-kill-hybrid-sexp     | "C-k"           |
   |-------------------------+-----------------|

   #+BEGIN_SRC emacs-lisp
     (use-package smartparens-config
       :ensure smartparens
       :bind (:map sp-keymap
                   ("C-M-a" . sp-beginning-of-sexp)
                   ("C-M-e" . sp-end-of-sexp)
                   ("C-S-u" . sp-up-sexp)
                   ("C-S-d" . sp-backward-down-sexp)
                   ("C-S-f" . sp-forward-symbol)
                   ("C-S-b" . sp-backward-symbol)
                   ("M-]"   . sp-unwrap-sexp)
                   ("M-["   . sp-backward-unwrap-sexp)
                   ("C-M-t" . sp-transpose-sexp)
                   ("M-<backspace>" . sp-backward-kill-sexp))
       :config (progn
                 (smartparens-global-strict-mode 1)
                 (show-smartparens-global-mode 1)
                 (sp-use-smartparens-bindings)))
   #+END_SRC

   Note that, according to the documentation, the way to specify which
   default set of keybindings to use is to set the variable
   =sp-base-key-bindings=. However, I couldn't get that to work so I
   just call =sp-use-smartparens-bindings= directly.

** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :after (ivy)
       :defer 5
       :commands projectile-mode
       :config (progn
                 (setq projectile-completion-system 'ivy)
                 (projectile-mode 1)))
   #+END_SRC

   Counsel-projectile provides further Ivy integration with Projectile
   by taking advantage of Ivy's mechanism to select from a list of
   actions and/or apply an action without leaving the completion
   session. The main keybinding for invoking Projectile becomes =C-c p
   SPC=.

   #+BEGIN_SRC emacs-lisp
     (use-package counsel-projectile
       :after (projectile)
       :config (counsel-projectile-on))
   #+END_SRC

** Spelling

   #+BEGIN_SRC emacs-lisp
     (use-package ispell
       :commands (ispell-word
                  ispell-region
                  ispell-buffer)
       :config (when (executable-find "hunspell")
                 (setq-default ispell-program-name "hunspell")
                 (setq ispell-really-hunspell t)))

     (use-package flyspell
       :commands (flyspell-mode
                  turn-on-flyspell
                  turn-off-flyspell
                  flyspell-prog-mode)
       :hook (((text-mode git-commit-mode-hook) . flyspell-mode)
              (prog-mode . flyspell-prog-mode)))
   #+END_SRC

** Define Word
   #+BEGIN_SRC emacs-lisp
     (use-package define-word
       :bind (("C-c d" . define-word-at-point)
              ("C-c D" . define-word)))
   #+END_SRC

** Keyfreq

   I'm interested in choosing more comfortable keybindings for my
   most-used commands.  In order to find out which commands these are
   I use =keyfreq=.

   View the statistics by invoking =keyfreq-show= and checking the
   resulting buffer =*frequencies*=.

   #+BEGIN_SRC emacs-lisp
     (use-package keyfreq
       :config (progn
                 (keyfreq-mode 1)
                 (keyfreq-autosave-mode 1)))
   #+END_SRC

** Chruby
   #+BEGIN_SRC emacs-lisp
     (use-package chruby
       :commands chruby-use)
   #+END_SRC

** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :mode "\\.markdown\\'"
       :commands markdown-mode)

     (use-package markdown-mode+
       :after markdown-mode)
   #+END_SRC

** Twitter
   #+BEGIN_SRC emacs-lisp
     (use-package twittering-mode
       :commands twit)
   #+END_SRC

** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :mode "\\.yaml\\'")
   #+END_SRC

** Try
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :commands try)
   #+END_SRC
